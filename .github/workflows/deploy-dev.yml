name: Build, Push, and Deploy (versioned, compose-aware)

on:
  push:
    branches: ["develop"]
  workflow_dispatch:

env:
  IMAGE_NAME: freelixlaos/freelix-backend   # Docker Hub repo
  DEPLOY_PATH: /opt/freelix-backend         # folder on server that already has your docker-compose.yml
  SERVICE_NAME: freelix-backend             # compose service/container name for backend

jobs:
  build-and-push:
    name: Build & Push Docker image
    runs-on: ubuntu-latest
    permissions:
      contents: read

    outputs:
      VERSION: ${{ steps.pkg.outputs.VERSION }}
      IMAGE_TAG: ${{ steps.pkg.outputs.IMAGE_TAG }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Read version safely (doesn't crash if package.json is missing)
      - name: Read version (fallbacks to latest)
        id: pkg
        shell: bash
        run: |
          set -euo pipefail
          VERSION=""
          if [ -f package.json ]; then
            VERSION=$(node -e "try{console.log(require('./package.json').version||'')}catch(e){console.log('')}" )
          fi
          if [ -z "$VERSION" ]; then
            VERSION="latest"
            IMAGE_TAG="latest"
          else
            IMAGE_TAG="v${VERSION}"
          fi
          echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"
          echo "IMAGE_TAG=$IMAGE_TAG" >> "$GITHUB_OUTPUT"
          echo "Resolved VERSION=$VERSION IMAGE_TAG=$IMAGE_TAG"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.pkg.outputs.IMAGE_TAG }}
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Server (update compose backend only)
    needs: build-and-push
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: ${{ env.IMAGE_NAME }}
      IMAGE_TAG: ${{ needs.build-and-push.outputs.IMAGE_TAG }}
      DEPLOY_PATH: ${{ env.DEPLOY_PATH }}
      SERVICE_NAME: ${{ env.SERVICE_NAME }}

    steps:
      - name: Deploy via SSH (sudo)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          # use default 22 if not provided
          port: ${{ secrets.SSH_PORT && secrets.SSH_PORT || 22 }}
          timeout: 60s
          command_timeout: 20m
          script: |
            set -euo pipefail

            if ! command -v docker >/dev/null 2>&1; then
              echo "docker not found on server"; exit 1
            fi
            if ! docker compose version >/dev/null 2>&1; then
              echo "docker compose v2 not found"; exit 1
            fi

            echo "Login Docker Hub..."
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            sudo mkdir -p "${DEPLOY_PATH}"
            cd "${DEPLOY_PATH}"

            if [ ! -f docker-compose.yml ]; then
              echo "docker-compose.yml not found in ${DEPLOY_PATH} â€” aborting."; exit 1
            fi

            echo "Current compose services:"
            sudo docker compose config --services || true

            # OPTIONAL: ensure backend network exists
            sudo docker network inspect backend >/dev/null 2>&1 || sudo docker network create backend

            # Update ONLY backend image line
            sudo sed -i -E "s|(^[[:space:]]*image:[[:space:]]*)${IMAGE_NAME}:[[:alnum:]._-]+|\1${IMAGE_NAME}:${IMAGE_TAG}|g" docker-compose.yml

            echo "Compose diff (around image):"
            grep -n -A2 -B2 -E "image:.*${IMAGE_NAME}" docker-compose.yml || true

            echo "Pull the new backend image..."
            sudo docker pull "${IMAGE_NAME}:${IMAGE_TAG}"

            # Wait for mysql healthy (best-effort)
            echo "Waiting for MySQL healthy (max ~90s)..."
            ATTEMPTS=0
            until [ "$(sudo docker inspect --format='{{json .State.Health.Status}}' mysql-prod 2>/dev/null | tr -d '\"')" = "healthy" ] || [ $ATTEMPTS -ge 9 ]; do
              ATTEMPTS=$((ATTEMPTS+1))
              sleep 10
            done

            echo "Recreate only backend with the new image..."
            sudo docker compose pull ${SERVICE_NAME}
            sudo docker compose up -d ${SERVICE_NAME}

            echo "Prune dangling images..."
            sudo docker image prune -f

            echo "Status:"
            sudo docker ps --filter "name=${SERVICE_NAME}" || true
            sudo docker compose ps || true

            echo "Recent backend logs (30 lines):"
            sudo docker logs --tail=30 ${SERVICE_NAME} || true
