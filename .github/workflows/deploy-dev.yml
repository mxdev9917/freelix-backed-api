name: Build & Deploy (immutable tag via env, backend only)

on:
  push:
    branches: ["develop"]        # เปลี่ยนตามที่ใช้
  workflow_dispatch:

concurrency:
  group: deploy-backend
  cancel-in-progress: true

env:
  IMAGE_NAME: freelixlaos/freelix-backend
  DEPLOY_PATH: /opt/freelix-backend
  SERVICE_NAME: backend
  CONTAINER_NAME: freelix-backend

jobs:
  build-and-push:
    name: Build & Push Docker image
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.ver.outputs.IMAGE_TAG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect version (from package.json, fallback to latest)
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package.json ]; then
            TAG=$(node -e "try{console.log(require('./package.json').version||'')}catch(e){console.log('')}")
          fi
          if [ -z "${TAG:-}" ]; then
            echo "IMAGE_TAG=latest" >> "$GITHUB_OUTPUT"
            echo "Using tag: latest"
          else
            echo "IMAGE_TAG=v${TAG}" >> "$GITHUB_OUTPUT"
            echo "Using tag: v${TAG}"
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.ver.outputs.IMAGE_TAG }}
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy on server (no file edits)
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ needs.build-and-push.outputs.IMAGE_TAG }}
    steps:
      - name: SSH & Deploy (pass IMAGE_TAG to compose)
        uses: appleboy/ssh-action@v1.2.0
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          DEPLOY_PATH: ${{ env.DEPLOY_PATH }}
          SERVICE_NAME: ${{ env.SERVICE_NAME }}
          CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          # ใช้อย่างใดอย่างหนึ่ง: password หรือ private key
          password: ${{ secrets.SSH_PASSWORD }}
          # key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          timeout: 60s
          command_timeout: 20m
          envs: IMAGE_NAME,IMAGE_TAG,DEPLOY_PATH,SERVICE_NAME,CONTAINER_NAME,DOCKERHUB_USERNAME,DOCKERHUB_TOKEN
          script: |
            set -euo pipefail
            cd "$DEPLOY_PATH"

            # ----- pick docker compose binary & sudo if required -----
            if docker info >/dev/null 2>&1; then SUDO=""; else SUDO="sudo"; fi
            if $SUDO docker compose version >/dev/null 2>&1; then
              DC="$SUDO docker compose"
            elif $SUDO docker-compose version >/dev/null 2>&1; then
              DC="$SUDO docker-compose"
            else
              echo "docker compose not found"; exit 1
            fi

            echo "Login Docker Hub..."
            echo "$DOCKERHUB_TOKEN" | $SUDO docker login -u "$DOCKERHUB_USERNAME" --password-stdin

            test -f docker-compose.yml || { echo "docker-compose.yml not found in $DEPLOY_PATH"; exit 1; }
            test -f .env || { echo ".env not found in $DEPLOY_PATH"; exit 1; }

            echo "Services available:"
            $DC -f docker-compose.yml config --services || true

            echo "Deploying ${IMAGE_NAME}:${IMAGE_TAG} (immutable, no file edits)"
            IMAGE_TAG="${IMAGE_TAG}" $DC --env-file .env pull "$SERVICE_NAME"
            IMAGE_TAG="${IMAGE_TAG}" $DC --env-file .env up -d "$SERVICE_NAME"

            echo "Status:"
            $DC -f docker-compose.yml ps || true
            $SUDO docker ps --filter "name=${CONTAINER_NAME}" || true
            echo "Recent logs:"
            $SUDO docker logs --tail=80 "${CONTAINER_NAME}" || true

            # Optional: cleanup
            $SUDO docker image prune -f || true
