name: Build, Push, and Deploy (versioned, compose-aware)

on:
  push:
    branches: ["develop"]
  workflow_dispatch:

env:
  IMAGE_NAME: freelixlaos/freelix-backend   # Docker Hub repo
  DEPLOY_PATH: /opt/freelix-backend         # folder on server with docker-compose.yml
  SERVICE_NAME: freelix-backend             # compose service/container name

jobs:
  build-and-push:
    name: Build & Push Docker image
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      VERSION: ${{ steps.pkg.outputs.VERSION }}
      IMAGE_TAG: ${{ steps.pkg.outputs.IMAGE_TAG }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node (for reading package.json)
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Read version (fallback to latest)
        id: pkg
        shell: bash
        run: |
          set -euo pipefail
          VERSION=""
          if [ -f package.json ]; then
            VERSION=$(node -e "try{console.log(require('./package.json').version||'')}catch(e){console.log('')}")
          fi
          if [ -z "$VERSION" ]; then
            VERSION="latest"
            IMAGE_TAG="latest"
          else
            IMAGE_TAG="v${VERSION}"
          fi
          echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"
          echo "IMAGE_TAG=$IMAGE_TAG" >> "$GITHUB_OUTPUT"
          echo "Resolved VERSION=$VERSION IMAGE_TAG=$IMAGE_TAG"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.pkg.outputs.IMAGE_TAG }}
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Server (update compose backend only)
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      # Optional guard: stop early if essential secrets are missing
      - name: Validate required secrets
        if: ${{ secrets.SSH_HOST == '' || secrets.SSH_USER == '' || secrets.SSH_PASSWORD == '' || secrets.DOCKERHUB_USERNAME == '' || secrets.DOCKERHUB_TOKEN == '' }}
        run: |
          echo "::error::Missing required secrets. Set SSH_HOST, SSH_USER, SSH_PASSWORD, DOCKERHUB_USERNAME, DOCKERHUB_TOKEN."
          exit 1

      - name: Deploy via SSH (non-interactive sudo using SSH password)
        uses: appleboy/ssh-action@v1.2.0
        env:
          IMAGE_TAG: ${{ needs.build-and-push.outputs.IMAGE_TAG }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}  # used for sudo as well
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          # port: ${{ secrets.SSH_PORT }}   # uncomment if you use a non-default port
          timeout: 60s
          command_timeout: 20m
          # Pass env vars to the remote session
          envs: IMAGE_NAME,IMAGE_TAG,DEPLOY_PATH,SERVICE_NAME,DOCKERHUB_USERNAME,DOCKERHUB_TOKEN,SSH_PASSWORD
          script: |
            set -euo pipefail

            # Use SSH password for sudo
            SUDO_PASS="$SSH_PASSWORD"

            # Define a helper that runs commands with sudo if needed (non-interactively)
            if [ "$(id -u)" -eq 0 ]; then
              sudo_cmd() { "$@"; }
            else
              if [ -z "${SUDO_PASS:-}" ]; then
                echo "::error::This user requires sudo but no password provided."
                exit 1
              fi
              # Validate sudo and keep it alive briefly
              printf "%s\n" "$SUDO_PASS" | sudo -S -v
              sudo_cmd() { printf "%s\n" "$SUDO_PASS" | sudo -S "$@"; }
            fi

            # Basic checks
            if ! sudo_cmd command -v docker >/dev/null 2>&1; then
              echo "docker not found on server"; exit 1
            fi
            if ! sudo_cmd docker compose version >/dev/null 2>&1; then
              echo "docker compose v2 not found"; exit 1
            fi

            # Login to Docker Hub (stdin, non-tty)
            printf '%s' "$DOCKERHUB_TOKEN" | sudo_cmd docker login -u "$DOCKERHUB_USERNAME" --password-stdin

            # Ensure compose folder exists
            sudo_cmd mkdir -p "$DEPLOY_PATH"

            # Validate compose file exists
            if ! sudo_cmd test -f "$DEPLOY_PATH/docker-compose.yml"; then
              echo "docker-compose.yml not found in $DEPLOY_PATH â€” aborting."
              exit 1
            fi

            echo "Current compose services:"
            sudo_cmd docker compose -f "$DEPLOY_PATH/docker-compose.yml" config --services || true

            # Ensure network exists (optional)
            sudo_cmd docker network inspect backend >/dev/null 2>&1 || sudo_cmd docker network create backend

            # Update ONLY backend image line
            sudo_cmd sed -i -E "s|(^[[:space:]]*image:[[:space:]]*)${IMAGE_NAME}:[[:alnum:]._-]+|\1${IMAGE_NAME}:${IMAGE_TAG}|g" "$DEPLOY_PATH/docker-compose.yml"

            echo "Compose diff (around image):"
            sudo_cmd grep -n -A2 -B2 -E "image:.*${IMAGE_NAME}" "$DEPLOY_PATH/docker-compose.yml" || true

            echo "Pull the new backend image..."
            sudo_cmd docker pull "${IMAGE_NAME}:${IMAGE_TAG}"

            echo "Waiting for MySQL healthy (max ~90s)..."
            ATTEMPTS=0
            until [ "$(sudo_cmd docker inspect --format='{{json .State.Health.Status}}' mysql-prod 2>/dev/null | tr -d '\"')" = "healthy" ] || [ $ATTEMPTS -ge 9 ]; do
              ATTEMPTS=$((ATTEMPTS+1))
              sleep 10
            done

            echo "Recreate only backend with the new image..."
            sudo_cmd docker compose -f "$DEPLOY_PATH/docker-compose.yml" pull "${SERVICE_NAME}"
            sudo_cmd docker compose -f "$DEPLOY_PATH/docker-compose.yml" up -d "${SERVICE_NAME}"

            echo "Prune dangling images..."
            sudo_cmd docker image prune -f

            echo "Status:"
            sudo_cmd docker ps --filter "name=${SERVICE_NAME}" || true
            sudo_cmd docker compose -f "$DEPLOY_PATH/docker-compose.yml" ps || true

            echo "Recent backend logs (30 lines):"
            sudo_cmd docker logs --tail=30 "${SERVICE_NAME}" || true
