name: Build & Deploy (backend only, CLI Compose)

on:
  push:
    branches: ["develop"]   # เปลี่ยนสาขาตามที่ใช้งาน
  workflow_dispatch:

concurrency:
  group: deploy-backend
  cancel-in-progress: true

env:
  IMAGE_NAME: freelixlaos/freelix-backend    # ชื่อ image บน Docker Hub
  DEPLOY_PATH: /opt/freelix-backend           # โฟลเดอร์ที่มี docker-compose.yml บนเซิร์ฟเวอร์
  SERVICE_NAME: backend                       # ชื่อ service ใน compose (ของ backend)
  CONTAINER_NAME: freelix-backend             # ชื่อคอนเทนเนอร์ (เช็คให้ตรงกับ compose)

jobs:
  build-and-push:
    name: Build & Push Docker image
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.ver.outputs.IMAGE_TAG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect version (from package.json, fallback latest)
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          TAG=""
          if [ -f package.json ]; then
            TAG=$(node -e "try{console.log(require('./package.json').version||'')}catch(e){console.log('')}")
          fi
          if [ -z "$TAG" ]; then
            echo "IMAGE_TAG=latest" >> "$GITHUB_OUTPUT"
            echo "Using tag: latest"
          else
            echo "IMAGE_TAG=v${TAG}" >> "$GITHUB_OUTPUT"
            echo "Using tag: v${TAG}"
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.ver.outputs.IMAGE_TAG }}
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy on server (update backend only)
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ needs.build-and-push.outputs.IMAGE_TAG }}
    steps:
      - name: SSH & Deploy
        uses: appleboy/ssh-action@v1.2.0
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          DEPLOY_PATH: ${{ env.DEPLOY_PATH }}
          SERVICE_NAME: ${{ env.SERVICE_NAME }}
          CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}         # ถ้าใช้ key ให้เปลี่ยนเป็น key / passphrase แทน
          port: ${{ secrets.SSH_PORT }}                 # ถ้าเป็น 22 จะเว้นว่างไว้ได้
          timeout: 60s
          command_timeout: 20m
          envs: IMAGE_NAME,IMAGE_TAG,DEPLOY_PATH,SERVICE_NAME,CONTAINER_NAME
          script: |
            set -euo pipefail

            # ===== Decide sudo for docker & filesystem =====
            if docker info >/dev/null 2>&1; then SUDO=""; else SUDO="sudo"; fi
            PARENT="$(dirname "$DEPLOY_PATH")"
            if [ ! -d "$DEPLOY_PATH" ]; then
              [ -w "$PARENT" ] || SUDO="sudo"
              $SUDO mkdir -p "$DEPLOY_PATH"
            fi

            # ===== Check docker compose command =====
            if $SUDO docker compose version >/dev/null 2>&1; then
              DC="$SUDO docker compose"
            elif $SUDO docker-compose version >/dev/null 2>&1; then
              DC="$SUDO docker-compose"
            else
              echo "docker compose not found"; exit 1
            fi

            echo "Login Docker Hub..."
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | $SUDO docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            # ===== Ensure compose file exists =====
            if [ ! -f "$DEPLOY_PATH/docker-compose.yml" ]; then
              echo "ERROR: $DEPLOY_PATH/docker-compose.yml not found"; exit 1
            fi

            echo "Current services:"
            $DC -f "$DEPLOY_PATH/docker-compose.yml" config --services || true

            # ===== Update image tag in compose =====
            echo "Update image tag to ${IMAGE_TAG}"
            sed -i -E "s|(^[[:space:]]*image:[[:space:]]*${IMAGE_NAME}:)[[:alnum:]._-]+|\1${IMAGE_TAG}|g" "$DEPLOY_PATH/docker-compose.yml"

            echo "Compose diff (image lines):"
            grep -n -A1 -B1 -E "image:.*${IMAGE_NAME}" "$DEPLOY_PATH/docker-compose.yml" || true

            # ===== Pull new image & recreate only backend =====
            $SUDO docker pull "${IMAGE_NAME}:${IMAGE_TAG}"
            $DC -f "$DEPLOY_PATH/docker-compose.yml" --env-file "$DEPLOY_PATH/.env" pull "$SERVICE_NAME"
            $DC -f "$DEPLOY_PATH/docker-compose.yml" --env-file "$DEPLOY_PATH/.env" up -d "$SERVICE_NAME"

            # ===== Show status & last logs =====
            $SUDO docker ps --filter "name=${CONTAINER_NAME}" || true
            $DC -f "$DEPLOY_PATH/docker-compose.yml" ps || true
            echo "Recent logs:"
            $SUDO docker logs --tail=50 "${CONTAINER_NAME}" || true

            # Optional: prune dangling images
            $SUDO docker image prune -f || true
